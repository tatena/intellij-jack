{
  parserClass="ge.freeuni.jack.language.parser.JackParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jack"
  psiImplClassSuffix="Impl"
  psiPackage="ge.freeuni.jack.language.psi"
  psiImplPackage="ge.freeuni.jack.language.psi.impl"

  elementTypeHolderClass="ge.freeuni.jack.language.psi.JackTypes"
  elementTypeClass="ge.freeuni.jack.language.psi.JackElementType"
  tokenTypeClass="ge.freeuni.jack.language.psi.JackTokenType"

  tokens=[
    SEMICOLON = ";"
    LBRACE = "{"
    RBRACE = "}"
    JCLASS = "class"
  ]

	generateTokenAccessors=true
	psiImplUtilClass="ge.freeuni.jack.language.psi.impl.JackPsiImplUtil"
}

File ::= ClassDeclaration?
ClassDeclaration ::= JCLASS ClassNameDefinition ClassBody {
	pin=1
	methods=[getClassName]
}

ClassNameDefinition ::= identifier {
	mixin="ge.freeuni.jack.language.psi.impl.JackNamedElementImpl"
	implements="ge.freeuni.jack.language.psi.JackNamedElement"
	methods=[getClassName getNameIdentifier setName]
}
ClassBody ::= LBRACE Property* RBRACE {pin=1}

Property ::= (static | field) Type identifier SEMICOLON {
	pin=1
	recoverWhile=PropertyRecovery
}
private Type ::= PrimitiveType | ReferenceType
PrimitiveType ::= (int | boolean | char)
ReferenceType ::= identifier {
	mixin="ge.freeuni.jack.language.psi.impl.JackNamedElementImpl"
	implements="ge.freeuni.jack.language.psi.JackNamedElement"
	methods=[setName getClassName getNameIdentifier]
}

private PropertyRecovery ::= !(static | field | int | char | boolean | identifier | SEMICOLON | RBRACE | LBRACE) 
