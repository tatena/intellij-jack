{
  parserClass="ge.freeuni.jack.language.parser.JackParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jack"
  psiImplClassSuffix="Impl"
  psiPackage="ge.freeuni.jack.language.psi"
  psiImplPackage="ge.freeuni.jack.language.psi.impl"

  elementTypeHolderClass="ge.freeuni.jack.language.psi.JackTypes"
  elementTypeClass="ge.freeuni.jack.language.psi.type.JackElementType"
  tokenTypeClass="ge.freeuni.jack.language.psi.type.JackTokenType"

  tokens=[
    SEMICOLON = ";"
    LBRACE = "{"
    RBRACE = "}"
    JCLASS = "class"
    LPAREN = "("
    RPAREN = ")"
    COMMA = ","
    EQ = "="
    NOT = "~"
    AND = "&"
    OR = "|"
    LT = "<"
    GT = ">"
    PLUS = "+"
    MINUS = "-"
    MUL = "*"
    DIV = "/"
    LBRACK = "["
    RBRACK = "]"
    DOT = "."
  ]
	extends(".*Expr")=Expr

	generateTokenAccessors=true
	psiImplUtilClass="ge.freeuni.jack.language.psi.util.JackPsiImplUtil"
	
	extends("EqualGroup|ConditionalGroup|SumGroup|ProductGroup")=BinaryExpr
	
}

File ::= ClassDeclaration?
ClassDeclaration ::= JCLASS ClassNameDefinition ClassBody {
	pin=1
	methods=[getClassName getStaticMethods getMemberMethods]
}

fake BinaryExpr ::= Expr+ {
	methods=[left="Expression[0]" right="Expression[1]"]
}

ClassNameDefinition ::= identifier {
	implements="ge.freeuni.jack.language.psi.JackNamedElement"
	mixin="ge.freeuni.jack.language.psi.impl.JackClassNameDefinitionMixin"
	stubClass="ge.freeuni.jack.language.stub.impl.JackClassNameDefStub"
	elementTypeFactory="ge.freeuni.jack.language.psi.util.JackElementFactoryKt.factory"
}
ClassBody ::= LBRACE (Property | PropertyPlaceholder)* (Func | FuncPlaceholder)* RBRACE {pin=1}


Property ::= PropertyScope Type PropertyDefinition DefinitionTail* SEMICOLON {
	pin=1
//	recoverWhile=PropertyRecovery
	methods=[getType]
}

PropertyPlaceholder ::= identifier
FuncPlaceholder ::= identifier


PropertyScope ::= static | field {
	methods=[getScope]
}

//private PropertyRecovery ::= !(static | field | int | char | boolean | identifier | SEMICOLON | RBRACE | LBRACE) 

private Type ::= PrimitiveType | ReferenceType

PrimitiveType ::= (int | boolean | char)

ReferenceType ::= identifier {
	methods=[setName getReference resolve]
}
PropertyDefinition ::= identifier {
	implements="ge.freeuni.jack.language.psi.JackNamedElement"
	mixin="ge.freeuni.jack.language.psi.impl.JackPropertyDefinitionMixin"
	stubClass="ge.freeuni.jack.language.stub.impl.JackPropertyDefinitionStub"
	elementTypeFactory="ge.freeuni.jack.language.psi.util.JackElementFactoryKt.factory"
}


Func ::= FuncScope ReturnType FuncNameDefinition FuncParams FuncBody{
	 pin=1
}
FuncScope ::= function | method | constructor {
	methods=[isMethod isStatic]
}
private ReturnType ::= PrimitiveRetType | ReferenceType
PrimitiveRetType ::= (int | boolean | char | void)

FuncNameDefinition ::= identifier {
	implements="ge.freeuni.jack.language.psi.JackNamedElement"
	mixin="ge.freeuni.jack.language.psi.impl.JackMethodDefinitionMixin"
	stubClass="ge.freeuni.jack.language.stub.impl.JackMethodDefinitionStub"
	elementTypeFactory="ge.freeuni.jack.language.psi.util.JackElementFactoryKt.factory"
}

FuncParams ::= LPAREN Params* RPAREN { pin=1 }

private Params ::= Param Tail*
Param ::= Type PropertyDefinition {
    pin=1
	methods=[getType]
}

private Tail ::= COMMA Param
FuncBody ::= LBRACE LocalVars* Statement* RBRACE { pin=1 }

LocalVars ::= var Type PropertyDefinition DefinitionTail* SEMICOLON {
	pin=1
	methods=[getType]
}
private DefinitionTail ::= COMMA PropertyDefinition { pin=1 }

Statement ::= LetStatement
		| DoStatement
		| IfStatement
		| WhileStatement 
		| ReturnStatement
	    | StatementPlaceholder

StatementPlaceholder ::= identifier

LetStatement ::= let (IndexExpr | ReferenceExpr) EQ Expr SEMICOLON {pin=1}
DoStatement ::= do Expr SEMICOLON {pin=1}
IfStatement ::= if LPAREN Expr RPAREN IfBody ElseStatement? {pin=1}
ElseStatement ::= else ElseBody {pin=1}
WhileStatement ::= while LPAREN Expr RPAREN WhileBody {pin=1}
ReturnStatement ::= return Expr? SEMICOLON {pin=1}

IfBody ::= LBRACE Statement* RBRACE {pin=1}
ElseBody ::= LBRACE Statement* RBRACE {pin=1}
WhileBody ::= LBRACE Statement* RBRACE {pin=1}

Expr ::= EqualGroup
	   | ConditionalGroup
	   | SumGroup
	   | ProductGroup
	   | LogicalGroup
	   | CalcPrefixGroup
	   | AccessGroup
	   | CallGroup
	   | IndexGroup
	   | PrimaryGroup
	   {extraRoot=true}


private EqualGroup ::= EqualExpr 
private ConditionalGroup ::= LessExpr | MoreExpr
private SumGroup ::= PlusExpr | MinusExpr
private ProductGroup ::= MulExpr | DivExpr
private LogicalGroup ::= AndExpr | OrExpr
private CalcPrefixGroup ::= UnaryMinusExpr | UnaryNotExpr
private CallGroup ::= CallExpr
private AccessGroup ::= AccessExpr
private IndexGroup ::= IndexExpr
private PrimaryGroup ::=  LiteralExpr | ParenExpr | ReferenceExpr


EqualExpr ::= Expr EQ Expr
LessExpr ::= Expr LT Expr
MoreExpr ::= Expr GT Expr
AndExpr ::= Expr AND Expr
OrExpr ::= Expr OR Expr 
PlusExpr ::= Expr PLUS Expr 
MinusExpr ::= Expr MINUS Expr 
MulExpr ::= Expr MUL Expr 
DivExpr ::= Expr DIV Expr 
CallExpr ::= FuncReference CallParams
IndexExpr ::= Expr IndexParams
AccessExpr ::= AccessReference DOT (CallExpr | CallPlaceholder) {pin=2}
UnaryMinusExpr ::= MINUS Expr  {pin = 1}
UnaryNotExpr ::= NOT Expr  {pin = 1}


LiteralExpr ::= BoolLiteral | NumLiteral | StringLiteral | ThisLiteral | NullLiteral
ParenExpr ::= LPAREN Expr RPAREN {pin=1}

BoolLiteral ::= true | false
NumLiteral ::= integer
StringLiteral ::= string
ThisLiteral ::= this
NullLiteral ::= null

CallParams ::= LPAREN Arguments? RPAREN {pin=1}
IndexParams ::= LBRACK Arg RBRACK {pin=1}
Arguments ::= Arg (COMMA Arg)*  {pin(".*")=1}
Arg ::= Expr

ReferenceExpr ::= VarReference
AccessReference ::= VarReference 


FuncReference ::= identifier {
	methods=[setName resolve getReference]
}
VarReference ::= identifier {
	methods=[setName resolve getReference]
}

CallPlaceholder ::= identifier
